scalar GraphQLDate

type User{
  _id:ID!
  pet_id: Int!
  pet_name: String!
  pet_breed: String!
  pet_mail: String!
  pet_password: String!
  pet_postcode: String!
  latitude: String!
  longitude: String!
}

type Status {
  valid: Boolean!
  message: String!
}

type Output{
  data: User
  status: Status!
}

type Message{
  _id: ID!
  message_id: Int!
  contact_id: Int!
  sender_id: Int!
  receiver_id: Int!
  content: String!
  sent_at: GraphQLDate!
}

type ContactList{
  _id: ID!
  contact_id: Int!
  user_a: Int!
  user_b: Int!
}

type Posting{
  _id: ID!
  posting_id: Int!
  title: String!
  kind: String!
  content: String!
  poster_id: Int!
  created_at: GraphQLDate!
}

type OutputPosting{
  _id: ID!
  posting_id: Int!
  title: String!
  kind: String!
  content: String!
  poster_id: Int!
  created_at: GraphQLDate!
  user_name: String!
}

#Toned down pet informarion, used as inputs, without server generated value

input PetLoginInputs {
  pet_mail: String!
  pet_password: String!
}

input PetRegisterInputs {
  pet_name: String!
  pet_breed: String!
  pet_mail: String!
  pet_password: String!
  pet_postcode: String!
}

input PostingAddInputs {
  title: String!
  kind: String!
  content: String!
  poster_id: Int!
}

input MessageAddInputs {
  contact_id: Int!
  sender_id: Int!
  receiver_id: Int!
  content: String!
}

#Top level declarations

type Query {
  test: String!
  petInf: [User!]
  postingInf: [OutputPosting!]

}

type Mutation {
  petLogin(login: PetLoginInputs!): Output!
  petRegister(register: PetRegisterInputs!): Output!
  addPosting(posting: PostingAddInputs!): Boolean!
  deletePosting(posting_id: Int!): Boolean!
  getMyPosting(user_id: Int!): [OutputPosting!]
  addContactList(usera: Int!, userb: Int!): Status!
  getContactList(usera: Int!): [User!]!
  getAllMessages(usera: Int!, userb: Int!): [Message!]!
  addMessages(message: MessageAddInputs!): Message!
}
